using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace LyricStudio.Core.LyricTrack;

public static class Lrc2Ass
{
    public static string ToAssString(this TimeSpan timeSpan) =>
        string.Format("{0:0}:{1:00}:{2:00}.{3:00}",
            timeSpan.Hours,
            timeSpan.Minutes,
            timeSpan.Seconds,
            timeSpan.Milliseconds / 10);

    public static bool AssToLyric(string lrc, out string ass)
    {
        using MemoryStream stream = new();

        string template =
            $"""
            [Script Info]
            ; Script generated by {AppConfig.PackName} {AppConfig.AppVersion}
            ; {AppConfig.Website}
            Title: Default {AppConfig.PackName} file
            ScriptType: v4.00+

            [V4+ Styles]
            Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
            Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

            [Events]
            Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
            """;

        try
        {
            stream.Write(Encoding.UTF8.GetPreamble());
            stream.Write(Encoding.UTF8.GetBytes(template));
            stream.Write(Encoding.UTF8.GetBytes(Environment.NewLine));

            LrcLine[] lines = LrcHelper.ParseText(lrc).ToArray();

            for (int i = default; i < lines.Length; i++)
            {
                LrcLine line = lines[i];
                LrcLine? lineNext = (i + 1 < lines.Length) ? lines[i + 1] : null;

                if (line.LrcTime.HasValue)
                {
                    TimeSpan startTime = line.LrcTime.Value;
                    TimeSpan endTime = lineNext?.LrcTime ?? TimeSpan.FromSeconds(startTime.TotalSeconds + 4d);

                    stream.Write(Encoding.UTF8.GetBytes($"Dialogue: 0,{startTime.ToAssString()},{endTime.ToAssString()},Default,,0,0,0,,{line.LrcText}{Environment.NewLine}"));
                }
                else
                {
                    stream.Write(Encoding.UTF8.GetBytes($"Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,{line.LrcText}{Environment.NewLine}"));
                }
            }
        }
        catch (Exception e)
        {
            Debug.WriteLine(e);

            ass = null!;
            return false;
        }

        ass = Encoding.UTF8.GetString(stream.ToArray());
        return true;
    }
}
